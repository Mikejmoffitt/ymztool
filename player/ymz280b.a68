;
; YMZ280B 68000-side code.
; 2025 Mike J Moffitt
;
; De-facto standard C register clobber conventions are followed (d0-d1/a0-a1).

; -----------------------------------------------------------------------------
;
; Initialization
;
; -----------------------------------------------------------------------------
ymz_reset:
	lea	YMZ_CTRL, a0
	lea	YMZ_DATA, a1
	; Enable
	move.w	#$0080, (a0)
	move.w	#$0088, (a1)  ; L and R out
	; DSP disable
	move.w	#$0081, (a0)
	move.w	#$0001, (a1)  ; disable bit
	; Per-channel IRQ mask
	move.w	#$0f0FE, (a0)
	move.w	#$00FF, (a1)  ; disable for all
	; Control flags
	move.w	#$00FF, (a0)
	move.w	#$00C0, (a1)  ; KENB, MENB, IENB
	; Key off all channels
	move.w	#$0001, d1
	moveq	#8-1, d7
	moveq	#$00, d0  ; key off, mode 00 (quiet), no loop
-:
	move.w	d1, (a0)
	move.w	d0, (a1)
	addq.w	#4, d1  ; next channel block
	dbf	d7, -
	rts

; -----------------------------------------------------------------------------
;
; Playback API
;
; a0 is pointed to data within the YMZ data blob (the .bin file) which contains
; precalculated register data and position offsets.
; d0 is set to 0 - 7 to indicate which channel to play on.
;
; -----------------------------------------------------------------------------

; d0.w = channel (0-7)
ymz_stop:
	add.w	d0, d0
	add.w	d0, d0
	lea	YMZ_CTRL, a1
	bsr.w	ymz_dat_key_off_sub
	rts

ymz_stop_all:
	bra.w	ymz_reset

; a0.l = ymzdat
; d0.w = channel (0 - 7)
ymz_play_loop:
	bsr.b	ymz_play.setup_sub
	bra.w	ymz_dat_key_on_loop_sub

; a0.l = ymzdat
; d0.w = channel (0 - 7)
ymz_play:
	bsr.b	.setup_sub
	bra.w	ymz_dat_key_on_sub

; Sets up d0.w to hold the offset within a register block for the channel, and
; places YMZ_CTRL in a1 for all of the register poking subroutines.
.setup_sub:
	add.w	d0, d0
	add.w	d0, d0  ; d0 = channel offset in register block
	lea	YMZ_CTRL, a1
	bsr.b	ymz_dat_key_off_sub
	bsr.b	ymz_dat_set_fn_sub
	bsr.b	ymz_dat_set_tl_sub
	bsr.b	ymz_dat_set_pan_sub
	bra.w	ymz_dat_set_addr_sub

; d0.w = channel offset
; a0.l = YMZDAT
; a1.l = YMZ_CTRL
ymz_dat_key_off_sub:
	moveq	#$01, d1  ; R01
	add.w	d0, d1
	move.w	d1, (a1)
	bsr.w	ymz_delay_sub
	moveq	#$61, d1  ; mask for mode bits and FN8
	and.b	YMZDAT.key(a0), d1  ; ch key control
	move.w	d1, YMZ_DATA-YMZ_CTRL(a1)
	rts

; d0.w = channel offset
; a0.l = YMZDAT
ymz_dat_key_on_sub:
	moveq	#$01, d1  ; R01
	add.w	d0, d1
	move.w	d1,  (a1)
	bsr.w	ymz_delay_sub
	move.b	YMZDAT.key(a0), d1  ; ch key control
	move.w	d1, YMZ_DATA-YMZ_CTRL(a1)
	rts

; d0.w = channel offset
; a0.l = YMZDAT
ymz_dat_key_on_loop_sub:
	moveq	#$01, d1  ; R01
	add.w	d0, d1
	move.w	d1,  (a1)
	bsr.w	ymz_delay_sub
	move.b	YMZDAT.key(a0), d1  ; ch key control
	ori.w	#$10, d1  ; set loop bits
	move.w	d1, YMZ_DATA-YMZ_CTRL(a1)
	rts

; d0.w = channel offset
; a0.l = YMZDAT
ymz_dat_set_fn_sub:
	moveq	#$00, d1  ; R00
	add.w	d0, d1
	move.w	d1, (a1)
	bsr.w	ymz_delay_sub
	move.b	YMZDAT.fn(a0), d1  ; ch key control
	move.w	d1, YMZ_DATA-YMZ_CTRL(a1)
	rts

; d0.w = channel offset
; a0.l = YMZDAT
ymz_dat_set_tl_sub:
	moveq	#$02, d1  ; R02
	add.w	d0, d1
	move.w	d1, (a1)
	bsr.w	ymz_delay_sub
	move.b	YMZDAT.tl(a0), d1  ; ch key control
	move.w	d1, YMZ_DATA-YMZ_CTRL(a1)
	rts

; d0.w = channel offset
; a0.l = YMZDAT
ymz_dat_set_pan_sub:
	moveq	#$03, d1  ; R03
	add.w	d0, d1
	move.w	d1, (a1)
	bsr.w	ymz_delay_sub
	move.b	YMZDAT.pan(a0), d1  ; ch key control
	move.w	d1, YMZ_DATA-YMZ_CTRL(a1)
	rts

; d0.w = channel offset
; a0.l = YMZDAT
ymz_dat_set_addr_sub:
	lea	YMZ_CTRL, a1
	bsr.w	ymz_delay_sub
	move.l	a2, -(sp)
	lea	YMZDAT.start_address(a0), a2
	moveq	#$20, d1  ; base reg
	bsr.b	.write_addr_subsub
	lea	YMZDAT.end_address(a0), a2
	moveq	#$23, d1  ; base reg
	bsr.b	.write_addr_subsub
	lea	YMZDAT.loop_start_address(a0), a2
	moveq	#$21, d1  ; base reg
	bsr.b	.write_addr_subsub
	lea	YMZDAT.loop_end_address(a0), a2
	moveq	#$22, d1  ; base reg
	bsr.b	.write_addr_subsub
	move.l	(sp)+, a2
	rts

; a2.l = address data pointer
; a1.l = YMZ_CTRL
; d0.w = channel offset
; d1.w = base reg
.write_addr_subsub:
	add.w	d0, d1

	move.w	d1, (a1)
	bsr.w	ymz_delay_sub
	move.b	(a2)+, 1+YMZ_DATA-YMZ_CTRL(a1)
	add.w	#$20, d1

	move.w	d1, (a1)
	bsr.w	ymz_delay_sub
	move.b	(a2)+, 1+YMZ_DATA-YMZ_CTRL(a1)
	add.w	#$20, d1

	move.w	d1, (a1)
	bsr.w	ymz_delay_sub
	move.b	(a2)+, 1+YMZ_DATA-YMZ_CTRL(a1)
	rts

;
; Functions to just waste some time.
;
; d1 is clobbered; d0 left untouched.
ymz_delay_sub:
	move.w	d1, -(sp)
	moveq	#$10-1, d1
.loop:
	dbf	d1, .loop
	move.w	(sp)+, d1
	rts

ymz_delay_sub_long:
	move.w	d1, -(sp)
	moveq	#100, d1
	bra.s	ymz_delay_sub.loop
